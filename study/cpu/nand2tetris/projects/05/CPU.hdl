// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[15] = 0 일 경우 A 레지스터 처리 로직
    DMux(in=true, sel=instruction[15], a=al, b=dl);

    
    // instruction[15] = 1 일 경우  레지스터 처리 로직, ALU 연산
    Mux16(a=AReg, b=inM, sel=instruction[12], out=y);
    ALU(x=DReg, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=AluRes, zr=zr, ng=ng);


    // dest {m} 설정
    And(a=dl, b=instruction[3], out=DestMl);
    
    // dest {D} 설정
    And(a=dl, b=instruction[4], out=DestDl);

    // Register A 설정 과정
    And(a=dl, b=instruction[5], out=DestAl);
    Mux16(a=false, b=instruction, sel=al, out=A1);
    Mux16(a=A1, b=false, sel=dl, out=A2);
    Mux16(a=A2, b=AluRes, sel=DestAl, out=A3);

    // Register A, D 설정
    Or(a=al, b=DestAl, out=astat);
    Register(in=A3, load=astat, out=AReg);
    Register(in=AluRes, load=DestDl, out=DReg);

    // pc 연산


    // addressM 출력
    Or15(a=AReg, b=AReg, out=addressM);
    
    // outM, writeM 출력
    Mux16(a=false, b=AluRes, sel=DestMl, out=outM);
    Mux(a=false, b=true, sel=DestMl, out=writeM);

    // pc 출력
    PC(in=false, load=false, inc=true, reset=false, out=pc16);
    Or15(a=pc16, b=pc16, out=pc);
}