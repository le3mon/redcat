// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
/**
    16383 011111111111111
    16384 100000000000000
    24575 101111111111111
    24576 110000000000000
**/

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    

    PARTS:
    // 주소 값을 이용해 RAM, Screen, Keyboard 3 중 어디로 갈지 정하는 로직
    CheckRSK(in=address, a=ram, b=scr, c=key);

    // address[14]를 받네
    And(a=load, b=ram, out=raml);
    RAM16K(in=in, load=raml, address=address[0..13], out=w1);

    And(a=load, b=scr, out=scrl);
    Screen(in=in, load=scrl, address=address[0..12], out=w2);

    Keyboard(out=w3);

    Mux16(a=false, b=w1, sel=ram, out=out1);
    Mux16(a=out1, b=w2, sel=scr, out=out2);
    Mux16(a=out2, b=w3, sel=key, out=out);
}