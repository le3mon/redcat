// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen, bit_masks;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        let bit_masks = Array.new(16);
        let bit_masks[0]  = 1;
        let bit_masks[1]  = 2;
        let bit_masks[2]  = 4;
        let bit_masks[3]  = 8;
        let bit_masks[4]  = 16;
        let bit_masks[5]  = 32;
        let bit_masks[6]  = 64;
        let bit_masks[7]  = 128;
        let bit_masks[8]  = 256;
        let bit_masks[9]  = 512;
        let bit_masks[10] = 1024;
        let bit_masks[11] = 2048;
        let bit_masks[12] = 4096;
        let bit_masks[13] = 8192;
        let bit_masks[14] = 16384;
        let bit_masks[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, bit, val;
        let bit = x - ((x / 16) * 16);
        let addr = (y * 32) + (x / 16) + 16384;
        let val = Memory.peek(addr);
        
        if(color) {
            let val = bit | bit_masks[bit];
        }
        else{
            let val = bit & bit_masks[bit];
        }

        do Memory.poke(addr, val);
    
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, d_error, step_x, step_y, error;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx < 0) {
            let dx = -dx;
            let step_x = -1;
        }
        else {
            let step_x = 1;
        }

        if (dy < 0) {
            let dy = - dy;
            let step_y = -1;
        }
        else {
            let step_y = 1;
        }

        if (dx > dy) {
            let d_error = dy * 2;
            let y = y1;
            let x = x1;
            while (~(x = x2)) {
                do Screen.drawPixel(x, y);
                let error = error + d_error;
                if ((error > dx) | (error = dx)) {
                    let y = y + step_y;
                    let error = error - (dx * 2);
                }
                let x = x + step_x;
            }
            do Screen.drawPixel(x, y);
        }
        else {
            let d_error = dx * 2;
            let x = x1;
            let y = y1;
            while (~(y = y2)) {
                do Screen.drawPixel(x, y);
                let error = error + d_error;

                if ((error > dy) | (error = dy)) {
                    let x = x + dx;
                    let error = error - (dy * 2);
                }
                let y = y + step_y;
            }
            do Screen.drawPixel(x, y);
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x2, y2);
        do Screen.drawLine(x1, y1, x1, y2);
        do Screen.drawLine(x2, y1, x2, y2);
        do Screen.drawLine(x1, y2, x2, y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        do Output.printString("new,appendChar: ");
        return;
    }
}
